import groovy.json.JsonSlurper

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    //插件id和前面mavenCentral的不一样
    //开头是io.github不是com.github
    id "io.github.qq549631030.android-junk-code" version "1.3.3"
}
apply from: 'config2.gradle'
//apply plugin: 'kotlin-kapt'

android {
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        compileSdkVersion rootProject.ext.android.compileSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //阿里路由框架配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    signingConfigs {
        cfg {
            storeFile file("xingcai02.jks")
            storePassword "AZUP35Y01TKumN0613"
            keyAlias "app"
            keyPassword "AZUP35Y01TKumN0613"

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.cfg
            //zipAlignEnabled true 已默认启用，不需要显式配置
            minifyEnabled false // 是否开启混淆
            //shrinkResources true // 移除无用资源
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.cfg
            applicationIdSuffix ".db"
            debuggable true
            minifyEnabled false // 是否开启混淆
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }
    //统一资源前缀，规范资源引用
    //resourcePrefix "app_"
    dataBinding {
        enabled true
    }
    buildFeatures {
        buildConfig true
        viewBinding true
        //dataBinding true
    }
}

tasks.register("dyAssemble") {
    println "正在执行打包任务..."
    group = "custom tasks"
    description = "Assemble the active variant(s) and print their names"
    def json = file("${rootProject.projectDir.path}/channel_config/groupAll.json").getText("UTF-8")
    def flavors = new JsonSlurper().parseText(json)

    // 动态拼接 dependsOn 任务
    dependsOn flavors.collect { flavor ->
        "assemble${flavor.channel_name.capitalize()}"
    }

    doLast {
        println "打包任务完成"
    }
}


/*kapt {
    generateStubs = true
}*/

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //宿主项目中判断组件是否需要独立运行
    if (isBuildModule.toBoolean()) {
        //组件独立运行时，宿主项目直接依赖基础库，避免编译错误
        implementation project(':library-base')
    } else {
        //主业务模块
        implementation project(':module-main')
        //应用模块
        implementation project(':module-home')
        //活动模块
        implementation project(':module-activity')
        //充值模块
        implementation project(':module-recharge')
        //我的模块
        implementation project(':module-mine')
        //投注模块
        implementation project(':module-bet')
    }
}

