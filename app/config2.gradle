import groovy.json.JsonSlurper

android {
    flavorDimensions "channelName"
    productFlavors {

        def json = file("${rootProject.projectDir.path}/channel_config/groupAll.json").getText("UTF-8")
        def flavors = new JsonSlurper().parseText(json)
        flavors.each { flavor ->
            def channelJson = file("${rootProject.projectDir.path}/channel_config/channels/${flavor.json_name}.json").getText("UTF-8")
            def channelInfo = new JsonSlurper().parseText(channelJson)
            def appName = flavor.channel_name.endsWith("_pre") ?
                    channelInfo.app_name +"-v"+ channelInfo.versionCode :
                    channelInfo.app_name
            println("渠道 ：" + flavor.channel_name)
            println("应用名称 ：" + appName)
            def domainUrlListStr = ""
            channelInfo.domain_url_list.each { domain ->
                domainUrlListStr += domain.toString()
            }
            def domainListThirdStr = ""
            channelInfo.domain_url_list_third.each { domain ->
                domainListThirdStr += domain.toString()
            }
            def domainApiListStr = ""
            channelInfo.domain_api_list.each { domain ->
                domainApiListStr += domain.toString()
            }
            "${flavor.channel_name}" {

                applicationId channelInfo.applicationId
                versionName channelInfo.versionName
                versionCode channelInfo.versionCode
                resValue "string", "app_name", "\"${appName}\""
                resValue "string", "channel_name",  "\"${channelInfo.channel_name}\""  // 渠道名称
                resValue "string", "build_time", "${buildTime()}"
                resValue "string", "mixpanel_token",  "\"${channelInfo.mixpanel_token}\""
                resValue "string", "ms_secret_key",  "\"${channelInfo.ms_secret_key}\""
                resValue "string", "sentry_dsn",  "\"${channelInfo.sentry_dsn}\""
                resValue "bool", "is_tag",  "${channelInfo.is_tag}" // 是否开启统计
                resValue "string", "domain_url",  "\"${channelInfo.domain_url}\""
                resValue "string", "domain_url_list", "\"${domainUrlListStr}\""
                resValue "string", "domain_url_list_third", "\"${domainListThirdStr}\""
                resValue "string", "domain_api", "\"${channelInfo.domain_api}\""
                resValue "string", "domain_api_list", "\"${domainApiListStr}\""
                multiDexEnabled true
                dimension "channelName"
                manifestPlaceholders = [
                        label       : appName,
                        channel_name: flavor.channel_name
                ]
            }
        }
    }


    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 打包输出路径 发布用
                //variant.getPackageApplication().outputDirectory = new File("${project.rootDir.absolutePath}/outputs")
                //variant.getPackageApplicationProvider().get().outputDirectory = new File("${project.rootDir.absolutePath}/outputs")
                // 打包文件名
                def name1 = variant.flavorName.split("_")[0]
                def name2 = variant.flavorName.split("_")[1]
                def name = variant.flavorName
                //outputFileName = "${name}_v${variant.versionCode}_${variant.buildType.name}.apk"
                def tp = "${if (variant.buildType.name == 'debug') '_db' else ''}"
                //outputFileName = "${name}_v${variant.versionCode}.apk" // xxx_v1xx.apk
                //outputFileName = "${name1}_v${variant.versionCode}_${name2}${tp}.apk" // 自己用
                outputFileName = "${name1}_v${variant.versionCode}_${name2}_${releaseTime()}${tp}.apk" // 发布用
            }
        }
    }

}

androidJunkCode {

    def config = {
        packageBase = "com.abc.plugin.ui"  //生成java类根包名
        packageCount = 30 //生成包数量
        activityCountPerPackage = 4 //每个包下生成Activity类数量
        excludeActivityJavaFile = false
        //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
        otherCountPerPackage = 50  //每个包下生成其它类的数量
        methodCountPerClass = 20  //每个类下生成方法数量
        resPrefix = "pg_"  //生成的layout、drawable、string等资源名前缀
        drawableCount = 300  //生成drawable资源数量
        stringCount = 300  //生成string数量
    }

    def config2 = {
        packageBase = "com.xtree"  //生成java类根包名
        packageCount = 20 //生成包数量
        activityCountPerPackage = 10//每个包下生成Activity类数量
        excludeActivityJavaFile = false
        //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
        otherCountPerPackage = 50 //每个包下生成其它类的数量
        methodCountPerClass = 30 //每个类下生成方法数量
        resPrefix = "sc_"  //生成的layout、drawable、string等资源名前缀
        drawableCount = 15  //生成drawable资源数量
        stringCount = 200  //生成string数量
    }

    variantConfig {
        //注意：这里的debug,release为变体名称，如果没有设置productFlavors就是buildType名称，
        // 如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
        debug config
        release config

        xingCaiDebug config2
        xingCaiRelease config2
        xingCai_OLDebug config2
        xingCai_OLRelease config2
        xingCai_preDebug config2
        xingCai_preRelease config2
    }

}

/**
 * 返回随机的包名，适合下架比较快的应用
 * @param name 渠道名
 * @return 返回随机的包名 com.xxx.name
 */
static def getPluginPkg() {
    // 返回随机的包名 com.xxx.name
    return "com.${getRandomStr()}.plugin.ui"
}

/**
 * 返回随机数 1-9
 * @return 随机数
 */
static def getRandomNum() {
    def num = Math.abs(new Random().nextInt(99))
    int random = 1 + num.toInteger() % 9
    return random
}

static def getRandomNum5() {
    def num = Math.abs(new Random().nextInt(99))
    int random = 1 + num.toInteger() % 5
    return random
}

static def getRandomStr() {
    def characters = "abcdefghijklmnopqrstuvwxyz"
    def num = Math.abs(new Random().nextInt(99))
    int length = 2 + num.toInteger() % 5
    def str = ""
    Random random = new Random()
    for (i in 0..<length) {
        str += characters.charAt(random.nextInt(characters.length()))
    }
    return str
}

static def getResPrefix() {
    /*def characters = "abcdefghijklmnopqrstuvwxyz"
    int length = 2 + Math.abs(new Random().nextInt(3))
    def str = ""
    Random random = new Random()
    for (i in 0..<length) {
        str += characters.charAt(random.nextInt(characters.length()))
    }
    return str*/
    return "${"${getRandomStr()}".substring(0, 2)}_"
}

def static buildTime() {
    //return new Date().format("yyyyMMdd_HHmm", TimeZone.getTimeZone("GMT+8"))
    return new Date().format("yyyyMMdd-HHmm", TimeZone.getTimeZone("GMT+8"))
    //return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+8"))
}

def static releaseTime() {
    //return new Date().format("yyyyMMdd_HHmm", TimeZone.getTimeZone("GMT+8"))
    return new Date().format("MMddHHmm", TimeZone.getTimeZone("GMT+8"))
    //return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+8"))
}
