import groovy.json.JsonSlurper

apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        flavorDimensions "channelName"
        vectorDrawables.useSupportLibrary = true
    }
//    productFlavors {
//        def json = file("${rootProject.projectDir.path}/channel_config/groupAll.json").getText("UTF-8")
//        def flavors = new JsonSlurper().parseText(json)
//        flavors.each { flavor ->
//            "${flavor.channel_name}" {
//                def themeRes = "src/${flavor.theme}/res"
//                sourceSets.main.res.srcDirs = [themeRes, "src/main/res"]
//            }
//        }
//    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
            } else {
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }
    afterEvaluate {
        def json = file("${rootProject.projectDir.path}/channel_config/groupAll.json").getText("UTF-8")
        def flavors = new JsonSlurper().parseText(json)
        def activeVariant = getCurrentBuildVariant()
        if (activeVariant.isEmpty()) {
            def localProps = new Properties()
            localProps.load(new FileInputStream(rootProject.file("local.properties")))
            activeVariant = localProps['ACTIVE_VARIANT']
        }
        flavors.each { flavor ->
            if (activeVariant.contains("${flavor.channel_name}")) {
                def themeRes = "src/${flavor.theme}/res"
                sourceSets.main.res.srcDirs = [themeRes, "src/main/res"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig true
        viewBinding true
        //dataBinding true
    }
}

def getCurrentBuildVariant() {
    def variantName = "" // 默认变体

    // 1. 先尝试从 Gradle 任务名称获取
    def taskRequests = gradle.startParameter.taskNames
    taskRequests.each { task ->
        def match = task =~ /assemble(\w+)/
        if (match.find()) {
            variantName = match[0][1].uncapitalize()
        }
    }
    return variantName
}


dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api rootProject.ext.support["appcompat-v7"]
}
